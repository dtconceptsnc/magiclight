#!/usr/bin/with-contenv bashio
# ==============================================================================
# Start the Home Assistant WebSocket listener
# s6-overlay docs: https://github.com/just-containers/s6-overlay
# ==============================================================================

# ---------------------------------------------------------------
# 0. Ensure MagicLight integration files are installed
# ---------------------------------------------------------------
MAGICLIGHT_SOURCE="/opt/magiclight/custom_components/magiclight"
MAGICLIGHT_DEST_BASE="/config/custom_components"
MAGICLIGHT_DEST="${MAGICLIGHT_DEST_BASE}/magiclight"
MAGICLIGHT_MARKER="${MAGICLIGHT_DEST}/.managed_by_magiclight_addon"

manage_magiclight_integration() {
    local manage_integration
    manage_integration="$(bashio::config 'manage_integration')"

    if [ "${manage_integration}" = "null" ] || [ -z "${manage_integration}" ]; then
        manage_integration="true"
    fi

    if [ "${manage_integration}" = "false" ]; then
        bashio::log.info "Skipping MagicLight integration management (disabled in options)."
        return
    fi

    if [ ! -d "${MAGICLIGHT_SOURCE}" ]; then
        bashio::log.error "Bundled MagicLight integration source is missing at ${MAGICLIGHT_SOURCE}."
        bashio::log.error "The add-on cannot install the custom integration automatically."
        return
    fi

    if ! bashio::fs.directory_exists "${MAGICLIGHT_DEST_BASE}"; then
        bashio::log.info "Creating Home Assistant custom_components directory..."
        mkdir -p "${MAGICLIGHT_DEST_BASE}"
    fi

    if bashio::fs.directory_exists "${MAGICLIGHT_DEST}"; then
        if [ -f "${MAGICLIGHT_MARKER}" ]; then
            bashio::log.info "Updating existing MagicLight integration managed by the add-on..."
        else
            bashio::log.warning "MagicLight integration already present; replacing with add-on bundled copy."
        fi
        rm -rf "${MAGICLIGHT_DEST}"
    else
        bashio::log.info "Installing MagicLight custom integration..."
    fi

    cp -r "${MAGICLIGHT_SOURCE}" "${MAGICLIGHT_DEST_BASE}/"
    touch "${MAGICLIGHT_MARKER}"
    bashio::log.info "MagicLight integration deployed to ${MAGICLIGHT_DEST}."
}

manage_magiclight_integration

# ---------------------------------------------------------------
# 1. Detect mode
#    - If SUPERVISOR_TOKEN is present → ADDON
#    - Else → STANDALONE
# ---------------------------------------------------------------
if [ -n "${SUPERVISOR_TOKEN:-}" ]; then
    MODE="ADDON"
    bashio::log.info "Running in addon mode (SUPERVISOR_TOKEN present)"
    
    # In addon mode, use supervisor proxy URLs
    export HA_WEBSOCKET_URL="ws://supervisor/core/api/websocket"
    export HA_REST_URL="http://supervisor/core/api"
    export HA_TOKEN="${SUPERVISOR_TOKEN}"
    
    # These are not used in URL mode but kept for compatibility
    export HA_HOST="supervisor"
    export HA_PORT="80"
    export HA_USE_SSL="false"
else
    MODE="STANDALONE"
    bashio::log.info "Running in standalone mode (no supervisor token)"
    
    # Try to get config from bashio first, then fall back to env vars
    CONFIG_HOST=$(bashio::config 'host')
    CONFIG_PORT=$(bashio::config 'port')
    CONFIG_TOKEN=$(bashio::config 'token')
    CONFIG_USE_SSL=$(bashio::config 'use_ssl')
    
    # Set host
    if [ "${CONFIG_HOST}" != "null" ] && [ -n "${CONFIG_HOST}" ]; then
        export HA_HOST="${CONFIG_HOST}"
    else
        export HA_HOST="${HA_HOST:-localhost}"
    fi
    
    # Set port
    if [ "${CONFIG_PORT}" != "null" ] && [ -n "${CONFIG_PORT}" ]; then
        export HA_PORT="${CONFIG_PORT}"
    else
        export HA_PORT="${HA_PORT:-8123}"
    fi
    
    # Set token
    if [ "${CONFIG_TOKEN}" != "null" ] && [ -n "${CONFIG_TOKEN}" ]; then
        export HA_TOKEN="${CONFIG_TOKEN}"
    else
        export HA_TOKEN="${HA_TOKEN:-}"
    fi
    
    # Set SSL
    if [ "${CONFIG_USE_SSL}" != "null" ] && [ -n "${CONFIG_USE_SSL}" ]; then
        export HA_USE_SSL="${CONFIG_USE_SSL}"
    else
        export HA_USE_SSL="${HA_USE_SSL:-false}"
    fi
    
    # Build WebSocket URL
    if [ "${HA_USE_SSL}" = "true" ]; then
        export HA_WEBSOCKET_URL="wss://${HA_HOST}:${HA_PORT}/api/websocket"
    else
        export HA_WEBSOCKET_URL="ws://${HA_HOST}:${HA_PORT}/api/websocket"
    fi
fi

# Check if token is set
if [ -z "${HA_TOKEN}" ]; then
    bashio::log.error "No Home Assistant token provided!"
    bashio::log.info "Set token in addon configuration or HA_TOKEN environment variable"
    exit 1
fi

# Log startup
bashio::log.info "Starting Home Assistant WebSocket listener..."
bashio::log.info "Mode: ${MODE}"
bashio::log.info "WebSocket URL: ${HA_WEBSOCKET_URL}"

# Get color_mode configuration
COLOR_MODE=$(bashio::config 'color_mode')
if [ "${COLOR_MODE}" != "null" ] && [ -n "${COLOR_MODE}" ]; then
    export COLOR_MODE="${COLOR_MODE}"
else
    export COLOR_MODE="rgb"
fi

# Get min_color_temp configuration
MIN_COLOR_TEMP=$(bashio::config 'min_color_temp')
if [ "${MIN_COLOR_TEMP}" != "null" ] && [ -n "${MIN_COLOR_TEMP}" ]; then
    export MIN_COLOR_TEMP="${MIN_COLOR_TEMP}"
else
    export MIN_COLOR_TEMP="500"
fi

# Get max_color_temp configuration
MAX_COLOR_TEMP=$(bashio::config 'max_color_temp')
if [ "${MAX_COLOR_TEMP}" != "null" ] && [ -n "${MAX_COLOR_TEMP}" ]; then
    export MAX_COLOR_TEMP="${MAX_COLOR_TEMP}"
else
    export MAX_COLOR_TEMP="6500"
fi

bashio::log.info "Color mode: ${COLOR_MODE}"
bashio::log.info "Color temperature range: ${MIN_COLOR_TEMP}K - ${MAX_COLOR_TEMP}K"

# Set ingress port for web server
export INGRESS_PORT="8099"
bashio::log.info "Ingress port: ${INGRESS_PORT}"

# Start the web server in background
bashio::log.info "Starting Light Designer web server..."
cd /app
python3 webserver.py &
WEBSERVER_PID=$!
bashio::log.info "Web server started with PID ${WEBSERVER_PID}"

# Give the web server a moment to start
sleep 2

# Run the main Python app
bashio::log.info "Starting main application..."
exec python3 main.py
