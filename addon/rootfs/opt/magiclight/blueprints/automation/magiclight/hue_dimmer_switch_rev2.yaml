blueprint:
  name: MagicLight Hue Dimmer Switch (Test)
  description: >
    Experimental Hue Dimmer Switch controls for MagicLight with extended dimming tests
  domain: automation
  input:
    switch_device:
      name: Switch Device(s)
      description: The Hue/ZHA switch device(s) to use
      selector:
        device:
          multiple: true
          filter:
            - integration: zha
              manufacturer: Signify Netherlands B.V.
              model: RWL021
            - integration: zha
              manufacturer: Signify Netherlands B.V.
              model: RWL022
            - integration: zha
              manufacturer: Philips
              model: RWL021
            - integration: zha
              manufacturer: Philips
              model: RWL020
            - integration: zha
              manufacturer: Signify Netherlands B.V.
              model: RDM002
            - integration: zha
              manufacturer: Signify Netherlands B.V.
              model: ROM001
            - integration: zha
              manufacturer: Signify Netherlands B.V.
              model: RDM003
            - integration: zha
              manufacturer: Philips
              model: ROM001
            - integration: zha
              manufacturer: Philips
              model: RDM003
            - integration: hue
              manufacturer: Signify Netherlands B.V.
              model: Hue dimmer switch (RWL022)
            - integration: hue
              manufacturer: Signify Netherlands B.V.
              model: Hue dimmer switch (RWL021)
            - integration: hue
              manufacturer: Signify Netherlands B.V.
              model: Hue dimmer switch
    target_areas:
      name: Target Areas
      description: The area(s) to control when buttons are pressed
      selector:
        area:
          multiple: true

mode: restart
max_exceeded: silent

# ── Triggers ───────────────────────────────────────────────────────────────────
trigger:
  # ZHA single-press events
  - platform: event
    event_type: zha_event
    event_data:
      command: "on_press"
    id: zha_on
  - platform: event
    event_type: zha_event
    event_data:
      command: "off_press"
    id: zha_off
  - platform: event
    event_type: zha_event
    event_data:
      command: "up_press"
    id: zha_up
  - platform: event
    event_type: zha_event
    event_data:
      command: "down_press"
    id: zha_down
  # ZHA double-press events (requires firmware that emits *_double_press)
  - platform: event
    event_type: zha_event
    event_data:
      command: "up_double_press"
    id: zha_up_double
  - platform: event
    event_type: zha_event
    event_data:
      command: "down_double_press"
    id: zha_down_double
  - platform: event
    event_type: zha_event
    event_data:
      command: "off_triple_press"
    id: zha_triple_off

  # Hue Bridge (Philips Hue integration) — short_release per button:
  # subtype 1=ON, 2=UP, 3=DOWN, 4=OFF
  - platform: event
    event_type: hue_event
    event_data:
      type: short_release
      subtype: 1
    id: hue_on
  - platform: event
    event_type: hue_event
    event_data:
      type: short_release
      subtype: 4
    id: hue_off
  - platform: event
    event_type: hue_event
    event_data:
      type: short_release
      subtype: 2
    id: hue_up
  - platform: event
    event_type: hue_event
    event_data:
      type: short_release
      subtype: 3
    id: hue_down
  # Hue Bridge double short release events (subtype 2=UP, 3=DOWN)
  - platform: event
    event_type: hue_event
    event_data:
      type: double_short_release
      subtype: 2
    id: hue_up_double
  - platform: event
    event_type: hue_event
    event_data:
      type: double_short_release
      subtype: 3
    id: hue_down_double

  # (Optional) Older/alt Hue payloads some users still see (1002 style).
  # Uncomment if your bridge reports numeric 'event' codes:
  # - platform: event
  #   event_type: hue_event
  #   event_data: { event: 1002 }
  #   id: hue_on_legacy
  # - platform: event
  #   event_type: hue_event
  #   event_data: { event: 4002 }
  #   id: hue_off_legacy
  # - platform: event
  #   event_type: hue_event
  #   event_data: { event: 2002 }
  #   id: hue_up_legacy
  # - platform: event
  #   event_type: hue_event
  #   event_data: { event: 3002 }
  #   id: hue_down_legacy

# ── Vars ──────────────────────────────────────────────────────────────────────
variables:
  areas: !input target_areas
  switches: !input switch_device
  area_targets: "{{ areas if areas is iterable and areas is not string else [areas] }}"

# ── Actions ───────────────────────────────────────────────────────────────────
action:
  # Only proceed if the event came from one of our configured devices
  - condition: template
    value_template: >
      {% set ds = switches if switches is iterable else [switches] %}
      {{ trigger.event.data.device_id in ds }}
  - choose:
      # ON -> smart toggle
      - conditions:
          - condition: or
            conditions:
              - condition: trigger
                id: zha_on
              - condition: trigger
                id: hue_on
              # - condition: trigger
              #   id: hue_on_legacy
        sequence:
          - service: magiclight.magiclight_toggle
            data:
              area_id: "{{ area_targets }}"

      # OFF -> reset
      - conditions:
          - condition: or
            conditions:
              - condition: trigger
                id: zha_off
              - condition: trigger
                id: hue_off
              # - condition: trigger
              #   id: hue_off_legacy
        sequence:
          - service: magiclight.reset
            data:
              area_id: "{{ area_targets }}"

      # UP single -> dim up
      - conditions:
          - condition: or
            conditions:
              - condition: trigger
                id: zha_up
              - condition: trigger
                id: hue_up
              # - condition: trigger
              #   id: hue_up_legacy
        sequence:
          - service: magiclight.dim_up
            data:
              area_id: "{{ area_targets }}"

      # DOWN single -> dim down
      - conditions:
          - condition: or
            conditions:
              - condition: trigger
                id: zha_down
              - condition: trigger
                id: hue_down
              # - condition: trigger
              #   id: hue_down_legacy
        sequence:
          - service: magiclight.dim_down
            data:
              area_id: "{{ area_targets }}"

      # UP double -> step up
      - conditions:
          - condition: or
            conditions:
              - condition: trigger
                id: zha_up_double
              - condition: trigger
                id: hue_up_double
        sequence:
          - service: magiclight.step_up
            data:
              area_id: "{{ area_targets }}"

      # DOWN double -> step down
      - conditions:
          - condition: or
            conditions:
              - condition: trigger
                id: zha_down_double
              - condition: trigger
                id: hue_down_double
        sequence:
          - service: magiclight.step_down
            data:
              area_id: "{{ area_targets }}"

      # Triple OFF -> random color blast
      - conditions:
          - condition: trigger
            id: zha_triple_off
        sequence:
          - service: magiclight.magiclight_off
            data:
              area_id: "{{ area_targets }}"
          - repeat:
              for_each: "{{ area_targets }}"
              sequence:
                - service: light.turn_on
                  target:
                    area_id: "{{ repeat.item }}"
                  data:
                    transition: 1
                    brightness_pct: 100
                    hs_color:
                      - "{{ range(0, 360) | random }}"
                      - 100
